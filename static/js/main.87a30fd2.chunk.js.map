{"version":3,"sources":["apis/jsonPlaceholder.js","actions/index.js","components/UserHeader.js","components/PostList.js","components/App.js","reducers/index.js","reducers/postsReducer.js","reducers/usersReducer.js","index.js"],"names":["axios","create","baseURL","fetchPosts","dispatch","a","jsonPlaceholder","get","response","type","payload","data","fetchUser","id","UserHeader","user","this","props","className","name","React","Component","connect","state","ownProps","users","find","userId","PostList","fetchPostsAndUsers","posts","map","post","key","title","body","renderList","getState","_","uniq","forEach","App","combineReducers","action","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"uRAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,yCCMEC,EAAa,yDAAM,WAAMC,GAAN,eAAAC,EAAA,sEACLC,EAAgBC,IAAI,UADf,OACtBC,EADsB,OAG5BJ,EAAS,CAAEK,KAAM,cAAeC,QAASF,EAASG,OAHtB,2CAAN,uDAMbC,EAAY,SAAAC,GAAE,8CAAI,WAAMT,GAAN,eAAAC,EAAA,sEAENC,EAAgBC,IAAhB,iBAA8BM,IAFxB,OAEvBL,EAFuB,OAI7BJ,EAAS,CAAEK,KAAM,aAAcC,QAASF,EAASG,OAJpB,2CAAJ,uDCZrBG,E,iLAEO,IACDC,EAASC,KAAKC,MAAdF,KAER,OAAKA,EAIE,yBAAKG,UAAU,UAAUH,EAAKI,MAH5B,S,GANYC,IAAMC,WAiBhBC,eAJU,SAACC,EAAOC,GAC9B,MAAO,CAAET,KAAMQ,EAAME,MAAMC,MAAK,SAAAX,GAAI,OAAIA,EAAKF,KAAOW,EAASG,aAGjDL,CAA0BR,GCfnCc,E,4LAEFZ,KAAKC,MAAMY,uB,mCAIb,OAAOb,KAAKC,MAAMa,MAAMC,KAAI,SAAAC,GAC1B,OACE,yBAAKd,UAAU,OAAOe,IAAKD,EAAKnB,IAC9B,uBAAGK,UAAU,mCACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,eACb,4BAAKc,EAAKE,OACV,2BAAIF,EAAKG,OAEX,kBAAC,EAAD,CAAYR,OAAQK,EAAKL,gB,+BAQ/B,OAAO,yBAAKT,UAAU,2BAA2BF,KAAKoB,kB,GAvBnChB,IAAMC,WA+BdC,eAJS,SAAAC,GACtB,MAAO,CAAEO,MAAOP,EAAMO,SAGiB,CAAED,mBFjCT,yDAAM,WAAOzB,EAAUiC,GAAjB,SAAAhC,EAAA,sEAChCD,EAASD,KADuB,OAEtBmC,IAAEC,KAAKD,IAAEP,IAAIM,IAAWP,MAAO,WACvCU,SAAQ,SAAA3B,GAAE,OAAIT,EAASQ,EAAUC,OAHH,2CAAN,0DEiCnBS,CAAmDM,GC1BnDa,EAPH,WACV,OAEA,yBAAKvB,UAAU,gBAAe,kBAAC,EAAD,Q,QCFjBwB,cAAgB,CAC7BZ,MCLa,WAAyB,IAAxBP,EAAuB,uDAAf,GAAIoB,EAAW,uCACrC,OAAQA,EAAOlC,MACb,IAAK,cACH,OAAOkC,EAAOjC,QAChB,QACE,OAAOa,IDCXE,MENa,WAAyB,IAAxBF,EAAuB,uDAAf,GAAIoB,EAAW,uCACrC,OAAQA,EAAOlC,MACb,IAAK,aACH,MAAM,GAAN,mBAAWc,GAAX,CAAkBoB,EAAOjC,UAC3B,QACE,OAAOa,MCKPqB,EAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEFO,SAASC,cAAc,Y","file":"static/js/main.87a30fd2.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com'\n});\n","import _ from 'lodash';\nimport jsonPlaceholder from '../apis/jsonPlaceholder';\n\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\n  await dispatch(fetchPosts());\n  const userIds = _.uniq(_.map(getState().posts, 'userId'));\n  userIds.forEach(id => dispatch(fetchUser(id)));\n};\n\nexport const fetchPosts = () => async dispatch => {\n    const response = await jsonPlaceholder.get('/posts');\n\n    dispatch({ type: 'FETCH_POSTS', payload: response.data })\n  };\n\nexport const fetchUser = id => async dispatch => {\n\n  const response = await jsonPlaceholder.get(`/users/${id}`);\n\n  dispatch({ type: 'FETCH_USER', payload: response.data});\n};\n\n\n// alternate memoized version of the action creator below\n// export const fetchUser = id => dispatch => {\n//   _fetchUser(id, dispatch);\n// };\n//\n// const _fetchUser = _.memoize(async (id, dispatch) => {\n//   const response = await jsonPlaceholder.get(`/users/${id}`);\n//\n//   dispatch({ type: 'FETCH_USER', payload: response.data});\n// });\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nclass UserHeader extends React.Component {\n\n  render () {\n    const { user } = this.props\n\n    if (!user) {\n      return null;\n    }\n\n    return <div className=\"header\">{user.name}</div>;\n  }\n}\n\n const mapStateToProps = (state, ownProps) => {\n   return { user: state.users.find(user => user.id === ownProps.userId) };\n }\n\nexport default connect(mapStateToProps) (UserHeader);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPostsAndUsers } from '../actions';\nimport UserHeader from './UserHeader';\n\nclass PostList extends React.Component {\n  componentDidMount() {\n    this.props.fetchPostsAndUsers();\n  }\n\nrenderList() {\n  return this.props.posts.map(post => {\n    return (\n      <div className=\"item\" key={post.id}>\n        <i className=\"large middle aligned icon user\" />\n        <div className=\"content\">\n          <div className=\"description\">\n            <h2>{post.title}</h2>\n            <p>{post.body}</p>\n          </div>\n          <UserHeader userId={post.userId}/>\n        </div>\n      </div>\n    );\n  });\n}\n\n  render () {\n    return <div className=\"ui relaxed divided list\">{this.renderList()}</div>;\n  }\n}\n\nconst mapStateToProps = state => {\n  return { posts: state.posts };\n};\n\nexport default connect (mapStateToProps, { fetchPostsAndUsers }) (PostList);\n","import React from 'react';\nimport PostList from './PostList';\n\nconst App = () => {\n  return (\n\n  <div className=\"ui container\"><PostList /></div>\n);\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport postsReducer from './postsReducer';\nimport usersReducer from './usersReducer';\n\nexport default combineReducers({\n  posts: postsReducer,\n  users: usersReducer,\n});\n","export default (state = [], action) => {\n  switch (action.type) {\n    case 'FETCH_POSTS':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","export default (state = [], action) => {\n  switch (action.type) {\n    case 'FETCH_USER':\n      return [...state, action.payload];\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render (\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}